plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ ProdCode, signState, data=ppi)
ppiTree <- ctree(HasReject ~ ProdCode, SignState, data=ppi)
head(ppi)
ppi$SignState
ppiTree <- ctree(HasReject ~ ProdCode,SignState, data=ppi)
head(ppi)
ppiTree <- ctree(HasReject ~ ProdCode,MatchAll, data=ppi)
ppiTree <- ctree(HasReject ~ ProdCode + MatchAll, data=ppi)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ ProdCode + MatchAll, data=ppi)
plot(ppiTree, type="simple")
ppi$ProdCode <- as.Factor(ppi$ProdCode)
ppi$ProdCode <- as.factor(ppi$ProdCode)
ppiTree <- ctree(HasReject ~ ProdCode + MatchAll, data=ppi)
plot(ppiTree, type="simple")
head(ppi)
ppi$MatchAll <- as.factor(ppi$MatchAll)
ppiTree <- ctree(HasReject ~ ProdCode + MatchAll, data=ppi)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ MatchAll, data=ppi)
plot(ppiTree, type="simple")
ppi$MatchAll['NA']
ppi$MatchAll[NA]
subset(ppi,MatchAll== 'NA')
subset(ppi,MatchAll== NA)
library(party)
ppi <-read.csv('C:/Users/jgreen/Documents/R_Files/SigningPPI.csv')
head(ppi)
ppi$ProdCode <- as.factor(ppi$ProdCode)
#ppi$MatchAll <- as.factor(ppi$MatchAll)
#subset(ppi,MatchAl)
#ppi$ProdCode <- as.factor(ppi$ProdCode)
# Work with the data:
ppiTree <- ctree(HasReject ~ MatchAll, data=ppi)
plot(ppiTree, type="simple")
ppi$MatchAll <- as.factor(ppi$MatchAll)
head(ppi)
ppi$ProdCode <- as.factor(ppi$ProdCode)
ppi$MatchAll <- as.factor(ppi$MatchAll)
#subset(ppi,MatchAl)
#ppi$ProdCode <- as.factor(ppi$ProdCode)
# Work with the data:
ppiTree <- ctree(HasReject ~ MatchAll, data=ppi)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ SignState, data=ppi)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ SignState + ProdCode + LoanAmt, data=ppi)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ ProdCode + LoanAmt, data=ppi)
plot(ppiTree, type="simple")
mean(ppi$LoanAmt)
max(ppi$LoanAmt)
subset(ppi,MatchAll == 0)
ppiTree <- ctree(HasReject ~ MatchAll, data=ppi)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ MatchAll + PropState, data=ppi)
plot(ppiTree, type="simple")
subset(ppi,LoanAmt >= 1000000)
newPPI <- subset(ppi,LoanAmt < 1000000)
#subset(ppi,MatchAl)
#ppi$ProdCode <- as.factor(ppi$ProdCode)
# Work with the data:
ppiTree <- ctree(HasReject ~ MatchAll + PropState, data=newPPI)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ LoanAmt + PropState, data=newPPI)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ ProdType + PropState + PropCounty, data=newPPI)
plot(ppiTree, type="simple")
head(ppi)
ppiTree <- ctree(HasReject ~ ProdCode + PropState + PropCounty, data=newPPI)
plot(ppiTree, type="simple")
ppiTree
plot(ppiTree, type="simple")
library(party)
plot(ppiTree, type="simple")
library(party)
ppi <-read.csv('C:/Users/jgreen/Documents/R_Files/SigningPPI.csv')
head(ppi)
ppi$ProdCode <- as.factor(ppi$ProdCode)
newPPI <- subset(ppi,LoanAmt < 1000000)    # Remove loan amounts over $1million as these are usually errors.
ppiTree <- ctree(HasReject ~ LoanAmt, data=newPPI)
plot(ppiTree, type="simple")
ppiTree
as.integer(ppi$LoanAmt)
ppi$LoanAmt <- as.integer(ppi$LoanAmt)
newPPI <- subset(ppi,LoanAmt < 1000000)    # Remove loan amounts over $1million as these are usually errors.
ppiTree <- ctree(HasReject ~ LoanAmt, data=newPPI)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ ProdCode, data=newPPI)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ ProdCode + PropState, data=newPPI)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ PropState, data=newPPI)
plot(ppiTree, type="simple")
mean(ppi$LoanAmt)
mean(ppi$LoanAmt, na.rm=T)
median(ppi$LoanAmt, na.rm=T)
head(ppi)
ppiTree <- ctree(HasReject ~ LoanType, data=newPPI)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ LoanType + ProdCode, data=newPPI)
plot(ppiTree, type="simple")
ppi <-read.csv('C:/Users/jgreen/Documents/R_Files/SigningPPI.csv')
head(ppi)
ppi$ProdCode <- as.factor(ppi$ProdCode)
#ppi$LoanAmt <- as.integer(ppi$LoanAmt)
newPPI <- subset(ppi,LoanAmt < 1000000)    # Remove loan amounts over $1million as these are usually errors.
ppiTree <- ctree(HasReject ~ LoanType + ProdCode, data=newPPI)
plot(ppiTree, type="simple")
ppiTree <- ctree(HasReject ~ VendFee + ProdCode, data=newPPI)
plot(ppiTree, type="simple")
prod111 <- subset(newPPI, ProdCode == '111')
prod116 <- subset(newPPI, ProdCode == '116')
prod111Tree <- ctree(HasReject ~ VendFee, data=prod111)
plot(prod111Tree)
plot(prod111Tree, type="simple")
plot(prod111$LoanAmt,prod111$VendFee, col=prod111$HasReject)
plot(prod111$LoanAmt,prod111$VendFee, col=prod111$HasReject, jitter=T)
111WithReject <- subset(prod111, HasReject=='Y')
111WithReject <- subset(prod111, HasReject==Y)
111WithReject <- subset(prod111, HasReject=="Y")
WithReject <- subset(prod111, HasReject=="Y")
plot(WithReject$LoanAmt,WithReject$VendFee)
library(plyr)
prod111$FeeOver200[prod111$VendFee > "200"] <- "Y"
prod111$FeeOver200[prod111$VendFee > 200] <- "Y"
ppi$VendFee <- as.float(ppi$VendFee)
ppi$VendFee <- as.decimal(ppi$VendFee)
ppi <-read.csv('C:/Users/jgreen/Documents/R_Files/SigningPPI.csv')
head(ppi)
ppi$ProdCode <- as.factor(ppi$ProdCode)
ppi$LoanAmt <- as.numeric(ppi$LoanAmt)
ppi$VendFee <- as.numeric(ppi$VendFee)
newPPI <- subset(ppi,LoanAmt < 1000000)    # Remove loan amounts over $1million as these are usually errors.
prod111 <- subset(newPPI, ProdCode == '111')
prod116 <- subset(newPPI, ProdCode == '116')
prod111$FeeOver200[prod111$VendFee > 200] <- "Y"
prod111Tree <- ctree(HasReject ~ VendFee, data=prod111)
plot(prod111Tree, type="simple")
prod111Tree <- ctree(HasReject ~ LoanAmt, data=prod111)
plot(prod111Tree, type="simple")
WithReject <- subset(prod111, HasReject=="Y")
plot(WithReject$LoanAmt,WithReject$VendFee)
ddply(prod111,c("FeeOver200","HasReject"), length(OrderId) )
ddply(prod111,c("FeeOver200","HasReject"), length(prod111$OrderId) )
ddply(prod111,c("FeeOver200","HasReject"), count(prod111$OrderId) )
count(prod111, c("FeeOver200","HasReject"))
ddply(prod111,c("FeeOver200","HasReject"), summarize,
all=length(OrderId) )
ddply(prod111,"FeeOver200", summarize,
#all=length(OrderId)
RejectPct=sum(HasReject="Y")/length(OrderId)
)
RejectPct=sum(HasReject="Y")/sum(HasReject="Y"|HasReject="N")
ddply(prod111,"FeeOver200", summarize,
#all=length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
ddply(prod111,"FeeOver200", summarize,
#all=length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod111,"MatchAll", summarize,
#all=length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod111,"MatchState", summarize,
#all=length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod111,"PropState", summarize,
#all=length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod116,"PropState", summarize,
#all=length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod116,"PropState", summarize,
Count=length(OrderId)
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod116,"PropState", summarize,
Count=length(OrderId),
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod111,"PropState", summarize,
Count=length(OrderId),
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod111,"PropZip", summarize,
Count=length(OrderId),
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
ddply(prod111,c("PropState","PropCounty"), summarize,
Count=length(OrderId),
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
plot(prod111$LoanAmt,prod111$VendFee)
ddply(prod111,"VendID", summarize,
Count=length(OrderId),
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
RejectsByVendor <- ddply(prod111,"VendID", summarize,
Count=length(OrderId),
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
head(RejectsByVendor)
subset(RejectsByVendor, Count>50)
subset(RejectsByVendor, Count>50, RejectPct>.1)
subset(RejectsByVendor, Count>50 & RejectPct>0.1)
subset(RejectsByVendor, Count>20 & RejectPct>0.1)
SigningsByVendor <- ddply(newPPI,"VendID", summarize,
Count=length(OrderId)
)
library(party)
library(plyr)
ppi <-read.csv('C:/Users/jgreen/Documents/R_Files/SigningPPI.csv')
head(ppi)
ppi$ProdCode <- as.factor(ppi$ProdCode)
ppi$LoanAmt <- as.numeric(ppi$LoanAmt)
ppi$VendFee <- as.numeric(ppi$VendFee)
newPPI <- subset(ppi,LoanAmt < 1000000)    # Remove loan amounts over $1million as these are usually errors.
ppiTree <- ctree(HasReject ~ ProdCode, data=newPPI)
plot(ppiTree, type="simple")
# Products 112, 117, 119, 348 have a 10th of a percent of these errors.
# Product 111 has 2.2% and accounts for the vast majority of the volume.
# Product 116 has a 4.7% reject rate, but only accounts for 638 orders.
prod111 <- subset(newPPI, ProdCode == '111')
prod116 <- subset(newPPI, ProdCode == '116')
#prod111Tree <- ctree(HasReject ~ LoanAmt, data=prod111)
#plot(prod111Tree, type="simple")
WithReject <- subset(prod111, HasReject=="Y")
plot(prod111$LoanAmt,prod111$VendFee)
# Interesting...It looks like most rejects are in the 200 to 300 vendor fee range. Let's see...
prod111$FeeOver200[prod111$VendFee > 200] <- "Y"
RejectsByVendor <- ddply(prod111,"VendID", summarize,
Count=length(OrderId),
RejectPct=sum(HasReject=="Y")/length(OrderId)
)
subset(RejectsByVendor, Count>20 & RejectPct>0.1)
# Plyr function to count by variables:
count(prod111, c("FeeOver200","HasReject"))
SigningsByVendor <- ddply(newPPI,"VendID", summarize,
Count=length(OrderId)
)
head(SigningsByVendor)
head(newPPI)
ppiTree <- ctree(HasReject ~ ProdCode + LoanType, data=newPPI)
plot(ppiTree, type="simple")
plot(prod111$LoanAmt,prod111$VendFee)
plot(prod111$LoanAmt,prod111$VendFee,col=HasReject)
plot(prod111$LoanAmt,prod111$VendFee,col=prod111$HasReject)
library(ggplot2)
ggplot(prod111, aes(x=LoanAmt, y=VendFee)) +
geom_point(shape=19,
alpha=1/4)
ggplot(prod111, aes(x=LoanAmt, y=VendFee)) +
geom_point(shape=19,
alpha=1/4,
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) +
geom_point(shape=19,
alpha=1/4,
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) +
geom_point(shape=19,
alpha=c(1/4,1),
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) +
geom_point(shape=c(19,20),
alpha=c(1/4,1),
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) +
geom_point(shape=19,
alpha=1/4,
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + stat_binhex()
library(scales)
library(hexbin)
install.packages("hexbin")
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + geom_density2d#stat_binhex()
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + geom_density2d()#stat_binhex()
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + geom_density2d() + #stat_binhex()
geom_point(shape=19,
alpha=1/4,
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + geom_density2d() + #stat_binhex()
geom_point(shape=19,
alpha=.1,
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + stat_binhex() #
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + stat_binhex() #+ geom_density2d()
geom_point(shape=19,
alpha=.1,
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + stat_binhex() +#+ geom_density2d()
geom_point(shape=19,
alpha=.1,
position=position_jitter(width=1,height=.5))
ggplot(prod111, aes(x=LoanAmt, y=VendFee, color=HasReject)) + stat_binhex() +#+ geom_density2d()
geom_point(shape=19,
alpha=.5,
position=position_jitter(width=1,height=.5))
isAble <- function(D, T, B) {
# D = Total Distance to Travel in mm.
# T = Number of jumps that must be taken.
# B = Length of a big jump in mm.
# S = Small Jump, which is always 1mm.
S <- 1
print(c(D,T,B))
}
isAble(10,20,30)
isAble <- function(D, T, B) {
# D = Total Distance to Travel in mm.
# T = Number of jumps that must be taken.
# B = Length of a big jump in mm.
# S = Small Jump, which is always 1mm.
S <- 1
print(c(D,T,B,S))
}
isAble(10,20,30)
isAble <- function(D, T, B) {
# D = Total Distance to Travel in mm.
# T = Number of jumps that must be taken.
# B = Length of a big jump in mm.
# S = Small Jump, which is always 1mm.
S <- 1
if D > 5 then print('YAY!')
print(c(D,T,B,S))
}
isAble(10,20,30)
isAble <- function(D, T, B) {
# D = Total Distance to Travel in mm.
# T = Number of jumps that must be taken.
# B = Length of a big jump in mm.
# S = Small Jump, which is always 1mm.
S <- 1
if (D > 5) {
print('YAY!')
}
print(c(D,T,B,S))
}
isAble(10,20,30)
isAble <- function(D, T, B) {
# D = Total Distance to Travel in mm.
# T = Number of jumps that must be taken.
# B = Length of a big jump in mm.
# S = Small Jump, which is always 1mm.
S <- 1
if (D < 5) {
print('YAY!')
}
print(c(D,T,B,S))
}
isAble(10,20,30)
isAble <- function(D, T, B) {
# D = Total Distance to Travel in mm.
# T = Number of jumps that must be taken.
# B = Length of a big jump in mm.
# S = Small Jump, which is always 1mm.
S <- 1
if (!D){
print('Impossible')
}
if (D < 5) {
print('YAY!')
}
print(c(D,T,B,S))
}
isAble(10,20,30)
isAble(T=20,B=30)
newPPI[,count=length(OrderId),by=VendID]
newPPI[,list(count=length(OrderId)),by=VendID]
dt <- data.table(newPPI)
dt[,count=length(OrderId),by=VendID]
library(data.table)
install.packages("data.table")
library(data.table)
dt <- data.table(newPPI)
dt[,count=length(OrderId),by=VendID]
head(dt)
dt[,mean=mean(VendFee),by=VendID]
dt[,list(mean=mean(VendFee)),by=VendID]
dt[,list(count=length(OrderId)),by=VendID]
system.time(SigningsByVendor <- ddply(newPPI,"VendID", summarize,
Count=length(OrderId)
)
)
system.time(
dt <- data.table(newPPI)
DTSigningsByVendor <- dt[,list(count=length(OrderId)),by=VendID]
)
system.time(SigningsByVendor <- ddply(newPPI,"VendID", summarize,
Count=length(OrderId))
)
dt <- data.table(newPPI)
system.time(
DTSigningsByVendor <- dt[,list(count=length(OrderId)),by=VendID]
)
library(plyr)
system.time(SigningsByVendor <- ddply(newPPI,"VendID", summarize,
Count=length(OrderId))
)
dt <- data.table(newPPI)
system.time(
DTSigningsByVendor <- dt[,list(count=length(OrderId)),by=VendID]
)
aggregate(x=newPPI, by=VendID, mean)
aggregate(x=OrderId, data=NewPPI, by=VendID, FUN="mean")
aggregate(x=OrderId, data=NewPPI, by=VendID, FUN=length)
head(cars)
plot(cars$speed,cars$dist)
plot(cars)
summary(cars)
install.packages("pdflatex")
- Bullet 1
install.packages("knitr")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.7.0_15\\jre\bin\\server\\jvm.dll')
library(rJava)
setwd("~/R_Files/SL_Reports")
#install.packages("rJava")
# install.packages("xlsx")
# install.packages("RODBC")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.7.0_15\\jre\bin\\server\\jvm.dll')
library(rJava)
Sys.setenv(JAVA_HOME="")
library(rJava)
install.packages("XLConnect")
library(XLConnect)
##################
# Kaggle: Criteo Challenge
# Jason Green
# 9/8/2014
##################
library(party)
library(beeswarm)
library(RODBC)
library(scales)
library(gridExtra)
library(ggplot2)
library(reshape)
library(plyr)
setwd("~/GitHub/Criteo")
# ---------------------------------------------------------------------------------
query <-
"SELECT Id, Label, I8, C9, C20, C17, C23
FROM train
WHERE 0.001 >= CAST(CHECKSUM(NEWID(), id) & 0x7fffffff AS float) / CAST (0x7fffffff AS int);"
# Database Connection -----------------------------------------------------------
criteo <- odbcDriverConnect('driver={SQL Server};server=(local);database=CRITEO;trusted_connection=true')
# Query for data
cData <- sqlQuery(criteo,query )   #   dataconnection,query
# Close Data Connection
odbcCloseAll()  # Used to close all connections.
head(cData)
install.packages("C50")
library(C50)
?C5.0Control
data(churn)
head(churn)
head(churnTest)
head(cData)
treeModel <- C5.0(x=cData[,3:7],y=cData$Label)
treeModel <- C5.0(x=cData[,3:7],y=as.factor(cData$Label))
treeModel
summary(treeModel)
head(cData[,3:7])
treeModel <- C5.0Control(x=cData[,3:7],y=as.factor(cData$Label))
cData$Label <- as.factor(cData$Label)
treeModel <- C5.0(x=cData[,3:7],y=cData$Label)
summary(treeModel)
# C5.0 Decition Tree
treeModel <- C5.0(x=cData[,3:7],
y=cData$Label,
trials = 5)
summary(treeModel)
treeModel <- C5.0(x=cData[,3:7],
y=cData$Label,
trials = 5,
control = C5.0Control(winnow = TRUE)
summary(treeModel)
# C5.0 Decition Tree
treeModel <- C5.0(x=cData[,3:7],
y=cData$Label,
trials = 5,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
# C5.0 Decition Tree
treeModel <- C5.0(x=cData[,3],
y=cData$Label,
trials = 5,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
treeModel <- C5.0(x=cData[,4],
y=cData$Label,
trials = 5,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
head(cData)
criteoTree <- ctree(Label ~ I8 + C17, data=cData)
plot(criteoTree, type="simple")
summary(criteoTree)
pred <- predict(criteoTree, newdata=test)
pred <- predict(criteoTree, newdata=cData)
head(pred)
cData$pred <- predict(criteoTree, newdata=cData)
head(cData)
cData
head(cData[pred==1,])
